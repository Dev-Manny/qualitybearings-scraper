const factorysupplyoutletScraperObject = {
  async scraper(browser) {
    let scrapedData = [];
    let newPage;

    // Wait for the required DOM to be rendered
    async function scrapeCurrentPage() {
      //Loop through each of those links, open a new page instance and get the relevant data from them
      let urls = [
        "119254",
        "119248",
        "119664",
        "117091",
        "117094",
        "117165",
        "119246",
        "117169",
        "119262",
        "117093",
        "117090",
        "117166",
        "117168",
        "119250",
        "119244",
        "119241",
        "117164",
        "119041",
        "119046",
        "119042",
        "1615X42MM",
        "1615X40MM",
        "1615X39MM",
        "1615X38MM",
        "1615X36MM",
        "119038",
        "1615X32MM",
        "1615X30MM",
        "119044",
        "1615X28MM",
        "119039",
        "1615X24MM",
        "1615X22MM",
        "1615X20MM",
        "1615X19MM",
        "119057",
        "1615X18MM",
        "119055",
        "1615X16MM",
        "1615X15MM",
        "119058",
        "119053",
        "119047",
        "1615X14MM",
        "119054",
        "119051",
        "119045",
        "1615X12MM",
        "119068",
        "119050",
        "119052",
        "119056",
        "119049",
        "119043",
        "119067",
        "119040",
        "119048",
        "119212",
        "117082",
        "117081",
        "393002",
        "119606",
        "1610X39MM",
        "119605",
        "1610X36MM",
        "119604",
        "119603",
        "119602",
        "117158",
        "119601",
        "119600",
        "119599",
        "119236",
        "119598",
        "119573",
        "119228",
        "119663",
        "117162",
        "119662",
        "1610X15MM",
        "117086",
        "119224",
        "117083",
        "119661",
        "117085",
        "117160",
        "119216",
        "1610X12MM",
        "117071",
        "117084",
        "117161",
        "117163",
        "119220",
        "119214",
        "119209",
        "119211",
        "117159",
        "119391",
        "119396",
        "119392",
        "119596",
        "119595",
        "119594",
        "119394",
        "119593",
        "119592",
        "119591",
        "119660",
        "119659",
        "119572",
        "119658",
        "119438",
        "119657",
        "1310X15MM",
        "119403",
        "119397",
        "119656",
        "119404",
        "119401",
        "119395",
        "1310X12MM",
        "119400",
        "119402",
        "119399",
        "119393",
        "119398",
        "119002",
        "119007",
        "119003",
        "1215X32MM",
        "1215X30MM",
        "119005",
        "1215X28MM",
        "1215X25MM",
        "1215X24MM",
        "1215X22MM",
        "1215X20MM",
        "1215X19MM",
        "1215X18MM",
        "1215X16MM",
        "119008",
        "1215X14MM",
        "119012",
        "119006",
        "1215X12MM",
        "119011",
        "119013",
        "119010",
        "119004",
        "119009",
        "119192",
        "117079",
        "117078",
        "119590",
        "119589",
        "117154",
        "119588",
        "119587",
        "119586",
        "119655",
        "119585",
        "119571",
        "119584",
        "119654",
        "1210X15MM",
        "119198",
        "119583",
        "117156",
        "119196",
        "1210X12MM",
        "117080",
        "117157",
        "119200",
        "119194",
        "117155",
        "119366",
        "117076",
        "117075",
        "117152",
        "119582",
        "119581",
        "119580",
        "119579",
        "119570",
        "119653",
        "119652",
        "1108X15MM",
        "119372",
        "119651",
        "119370",
        "1108X12MM",
        "117077",
        "119374",
        "119368",
        "119361",
        "117153",
        "119177",
        "117074",
        "117073",
        "117150",
        "119577",
        "119576",
        "119569",
        "119575",
        "119566",
        "100004",
        "119183",
        "119565",
        "119181",
        "1008X12MM",
        "119179",
        "119187",
        "119176",
        "117151",
        "114789",
        "117520",
        "119766",
        "119790",
        "119701",
        "426370",
        "119789",
        "119700",
        "119769",
        "119767",
        "272136",
        "119253",
        "119104",
        "119226",
        "117159",
        "119607",
        "119644",
        "119117",
        "119212",
        "119603",
        "119194",
        "119577",
        "117319",
        "117419",
        "117005",
        "119322",
        "97017",
        "117503",
        "119228",
        "119608",
        "119628",
        "119054",
        "119591",
        "119652",
        "117327",
        "117307",
        "117421",
        "117013",
        "119430",
        "119225",
        "119227",
        "119371",
        "119184",
        "119248",
        "117164",
        "117095",
        "117094",
        "117157",
        "117086",
        "117161",
        "119242",
        "119616",
        "119611",
        "119649",
        "119646",
        "119678",
        "119674",
        "117137",
        "117130",
        "117120",
        "117102",
        "117109",
        "117105",
        "117106",
        "119106",
        "119102",
        "119625",
        "119624",
        "119122",
        "119114",
        "117173",
        "119116",
        "117174",
        "117176",
        "117099",
        "119669",
        "119103",
        "117090",
        "119046",
        "117081",
        "119055",
        "119051",
        "119606",
        "119600",
        "119599",
        "117083",
        "119211",
        "119392",
        "119394",
        "119658",
        "119657",
        "119390",
        "119400",
        "119399",
        "119589",
        "119571",
        "119584",
        "119206",
        "119005",
        "119012",
        "117076",
        "119581",
        "119653",
        "119361",
        "117153",
        "119567",
        "119566",
        "119187",
        "117474",
        "117464",
        "117333",
        "117330",
        "117322",
        "117328",
        "117315",
        "117312",
        "117311",
        "117466",
        "117469",
        "117460",
        "117459",
        "117442",
        "117444",
        "117429",
        "117436",
        "117435",
        "117427",
        "117426",
        "119819",
        "117352",
        "117716",
        "117233",
        "117708",
        "117235",
        "117221",
        "117218",
        "117223",
        "117209",
        "117208",
        "117021",
        "117027",
        "117023",
        "117029",
        "117014",
        "117011",
        "117020",
        "119813",
        "119808",
        "119330",
        "119307",
        "119320",
        "119312",
        "120012",
        "97022",
        "119417",
        "117071",
        "117490",
        "117493",
        "117481",
        "117502",
        "117181",
        "117180",
        "426717",
        "117111",
        "393002",
        "119438",
        "117524",
        "117522",
        "117525",
        "117485",
        "119410",
        "119666",
        "119582",
        "117345",
        "119124",
        "119197",
        "119664",
        "117091",
        "117084",
        "119668",
        "119609",
        "117118",
        "117129",
        "117114",
        "119627",
        "119109",
        "119125",
        "117093",
        "119053",
        "119661",
        "119660",
        "119386",
        "119587",
        "119001",
        "117152",
        "119651",
        "119176",
        "117337",
        "117335",
        "117454",
        "117440",
        "117433",
        "117714",
        "117236",
        "117224",
        "117212",
        "117026",
        "117008",
        "119811",
        "119331",
        "119310",
        "120017",
        "120014",
        "97018",
        "97015",
        "97023",
        "117492",
        "117178",
        "119415",
        "119433",
        "119257",
        "117162",
        "117087",
        "119682",
        "119675",
        "117124",
        "117116",
        "119119",
        "117175",
        "119105",
        "119044",
        "119605",
        "119662",
        "119397",
        "117154",
        "119654",
        "119578",
        "424319",
        "117317",
        "117462",
        "117451",
        "424266",
        "117229",
        "117232",
        "117237",
        "117250",
        "119315",
        "119311",
        "120018",
        "117494",
        "119431",
        "119068",
        "119435",
        "119249",
        "119256",
        "119252",
        "119199",
        "119201",
        "119219",
        "119229",
        "119222",
        "119221",
        "119223",
        "119144",
        "119123",
        "119217",
        "119213",
        "119215",
        "119195",
        "119367",
        "119182",
        "119180",
        "117170",
        "119574",
        "119665",
        "119246",
        "119244",
        "119272",
        "119241",
        "119258",
        "117167",
        "117092",
        "119254",
        "117165",
        "117155",
        "117156",
        "117080",
        "119200",
        "119224",
        "117085",
        "117160",
        "117163",
        "119220",
        "117077",
        "119374",
        "117089",
        "119617",
        "119615",
        "119614",
        "119613",
        "119612",
        "117088",
        "119610",
        "119667",
        "119650",
        "117147",
        "117103",
        "119648",
        "119647",
        "119645",
        "119681",
        "119680",
        "119679",
        "119677",
        "119676",
        "117134",
        "119673",
        "117132",
        "117125",
        "117128",
        "117121",
        "117133",
        "117139",
        "117122",
        "117126",
        "117119",
        "117101",
        "117135",
        "117112",
        "117107",
        "117108",
        "117117",
        "117136",
        "117113",
        "117104",
        "117110",
        "117149",
        "119643",
        "119642",
        "119641",
        "119640",
        "119630",
        "119629",
        "119626",
        "119623",
        "119622",
        "119100",
        "119108",
        "119115",
        "119118",
        "119113",
        "119120",
        "119111",
        "119121",
        "119110",
        "119112",
        "119621",
        "119620",
        "119619",
        "119618",
        "119129",
        "117098",
        "117096",
        "117097",
        "119672",
        "119671",
        "119670",
        "119107",
        "119141",
        "117169",
        "119262",
      ];

      let pagePromise = (link, prodId) =>
        new Promise(async (resolve, reject) => {
          let dataObj = {};
          newPage = await browser.newPage();
          await newPage.goto(link, { waitUntil: "load", timeout: 70000 });
          console.log("inside here");
          const [lh] = await newPage.$x(
            '//*[@id="topOfPage"]/div[6]/div[1]/div/main/div[1]/div[1]/div[5]/article/div[1]/div[1]/ul/a/li[3]/div[1]'
          );
          // Check if the right hand side list is Outside Diameter
          const [rh] = await newPage.$x(
            '//*[@id="topOfPage"]/div[6]/div[1]/div/main/div[1]/div[1]/div[5]/article/div[1]/div[1]/ul/a/li[2]/div[1]'
          );

          if (typeof (await lh) !== "undefined") {
            const lhType = await lh.getProperty("textContent");

            if ((await lhType.jsonValue()) === "Outside Diameter:") {
              const [lhVal] = await newPage.$x(
                '//*[@id="topOfPage"]/div[6]/div[1]/div/main/div[1]/div[1]/div[5]/article/div[1]/div[1]/ul/a/li[3]/div[2]'
              );
              if (typeof (await lhVal) !== "undefined") {
                const lhValType = await lhVal.getProperty("textContent");
                let odVal = await lhValType.jsonValue();
                odVal = odVal.split("/")[0].replace(" Inch", '"');
                dataObj["productID"] = prodId;
                dataObj["OutsideDiameter"] = odVal;
                resolve(dataObj);
                await newPage.close();
              } else {
                dataObj["productID"] = prodId;
                resolve(dataObj);
                await newPage.close();
              }
            } else {
              if (typeof (await rh) !== "undefined") {
                const rhType = await rh.getProperty("textContent");
                // check the right hand side
                if ((await rhType.jsonValue()) === "Outside Diameter:") {
                  const [rhVal] = await newPage.$x(
                    '//*[@id="topOfPage"]/div[6]/div[1]/div/main/div[1]/div[1]/div[5]/article/div[1]/div[1]/ul/a/li[2]/div[2]'
                  );
                  if (typeof (await rhVal) !== "undefined") {
                    const rhValType = await rhVal.getProperty("textContent");
                    let rodVal = await rhValType.jsonValue();
                    rodVal = rodVal.split("/")[0].replace(" Inch", '"');
                    dataObj["productID"] = prodId;
                    dataObj["OutsideDiameter"] = rodVal;
                    resolve(dataObj);
                    await newPage.close();
                  } else {
                    dataObj["productID"] = prodId;
                    resolve(dataObj);
                    await newPage.close();
                  }
                } else {
                  dataObj["productID"] = prodId;
                  resolve(dataObj);
                  await newPage.close();
                }
              } else {
                dataObj["productID"] = prodId;
                resolve(dataObj);
                await newPage.close();
              }
            }
          } else {
            console.log("undefined");
            dataObj["productID"] = prodId;
            resolve(dataObj);
            await newPage.close();
          }
        });

      console.log("looping");
      console.log(urls);

      for (link in urls) {
        console.log(urls[link]);
        if (urls[link] != null) {
          console.log("got in");
          console.log(`https://factorysupplyoutlet.com/dodge-${urls[link]}`);
          let currentPageData = await pagePromise(
            `https://factorysupplyoutlet.com/dodge-${urls[link]}`,
            urls[link]
          );

          scrapedData.push(currentPageData);
        }
      }

      await newPage.close();
      return scrapedData;
    }
    let data = await scrapeCurrentPage();
    console.log(data);
    return data;
  },
};

module.exports = factorysupplyoutletScraperObject;
