const baldorScraperObject = {
  async scraper(browser) {
    let scrapedData = [];
    let newPage;

    // Wait for the required DOM to be rendered
    async function scrapeCurrentPage() {
      //Loop through each of those links, open a new page instance and get the relevant data from them
      let urls = [
        "M5H18T180IEC",
        "M5H18T200IEC",
        "M5H18T225IEC",
        "M8H79T160IEC",
        "114792",
        "471537",
        "119245",
        "119373",
        "119369",
        "119260",
        "119255",
        "119251",
        "119202",
        "119154",
        "119152",
        "119150",
        "119149",
        "119148",
        "119147",
        "119143",
        "119139",
        "114778",
        "119732",
        "119731",
        "119730",
        "119729",
        "119728",
        "119737",
        "119725",
        "119724",
        "119719",
        "119736",
        "119713",
        "119735",
        "119705",
        "119734",
        "119703",
        "119702",
        "119765",
        "119764",
        "119763",
        "119762",
        "119761",
        "119760",
        "119759",
        "119758",
        "119757",
        "119756",
        "119753",
        "119752",
        "119749",
        "119748",
        "119747",
        "119745",
        "119744",
        "119742",
        "119740",
        "119739",
        "119738",
        "114900",
        "114899",
        "114895",
        "114893",
        "114890",
        "114888",
        "114884",
        "114881",
        "114880",
        "114873",
        "114869",
        "114865",
        "114894",
        "114896",
        "119707",
        "119726",
        "119708",
        "119704",
        "117184",
        "119716",
        "114898",
        "114889",
        "117850",
        "117849",
        "119717",
        "119714",
        "119723",
        "119727",
        "119733",
        "119755",
        "119750",
        "119746",
        "119743",
        "119771",
        "119721",
        "119718",
        "119709",
        "119706",
        "119780",
        "119751",
        "119722",
        "117267",
        "117739",
        "119069",
        "119715",
        "117735",
        "117411",
        "114789",
        "119895",
        "119710",
        "114765",
        "119754",
        "119741",
        "119712",
        "119720",
        "117729",
        "114782",
        "117728",
        "117724",
        "117721",
        "423400",
        "423401",
        "423661",
        "119782",
        "114897",
        "114892",
        "114891",
        "114883",
        "114879",
        "114886",
        "114877",
        "114887",
        "114885",
        "114876",
        "114878",
        "114882",
        "114875",
        "114874",
        "114867",
        "114872",
        "114868",
        "114870",
        "114871",
        "114866",
        "114791",
        "114787",
        "114795",
        "114793",
        "114783",
        "114775",
        "114771",
        "114779",
        "114777",
        "114768",
        "114770",
        "114774",
        "114767",
        "119785",
        "119784",
        "119786",
        "119779",
        "119777",
        "119781",
        "119776",
        "119787",
        "119770",
        "119773",
        "119711",
        "426713",
        "5050X95MM",
        "5050X90MM",
        "5050X85MM",
        "5050X80MM",
        "5050X75MM",
        "5050X70MM",
        "5050X65MM",
        "5050X60MM",
        "5050X55MM",
        "117464",
        "117468",
        "117462",
        "117469",
        "5050X4-3/4",
        "5050X4-3/16",
        "117463",
        "5050X4-1/8",
        "117465",
        "117467",
        "117466",
        "117454",
        "117460",
        "117453",
        "5050X3-5/16",
        "117452",
        "5050X3-3/4",
        "5050X3-3/16",
        "117461",
        "5050X3-11/16",
        "5050X3-1/8",
        "5050X3-1/4",
        "5050X3-1/2",
        "5050X3",
        "5050X2-7/8",
        "117458",
        "5050X2-5/8",
        "5050X2-3/4",
        "117459",
        "5050X2-13/16",
        "117450",
        "5050X2-1/2",
        "5050X125MM",
        "5050X115MM",
        "117736",
        "5050X100MM",
        "4545X95MM",
        "4545X90MM",
        "4545X85MM",
        "4545X80MM",
        "4545X75MM",
        "4545X70MM",
        "4545X65MM",
        "4545X60MM",
        "4545X55MM",
        "117719",
        "117440",
        "117442",
        "117718",
        "117443",
        "117705",
        "117444",
        "117441",
        "117447",
        "117439",
        "117437",
        "117434",
        "117413",
        "4545X3-5/16",
        "117433",
        "117436",
        "117431",
        "117438",
        "4545X3-11/16",
        "117430",
        "117432",
        "117435",
        "117429",
        "117427",
        "117422",
        "117424",
        "4545X2-5/16",
        "117421",
        "117426",
        "117419",
        "117428",
        "4545X2-13/16",
        "4545X2-11/16",
        "4545X2-1/8",
        "4545X2-1/4",
        "4545X2-1/2",
        "4545X2-1/16",
        "117417",
        "117416",
        "4545X110MM",
        "4545X105MM",
        "4545X100MM",
        "117725",
        "117726",
        "4040X85MM",
        "117723",
        "4040X70MM",
        "4040X65MM",
        "119820",
        "119819",
        "119818",
        "117704",
        "117717",
        "117715",
        "117714",
        "117716",
        "117352",
        "117341",
        "117334",
        "117337",
        "4040X3-5/16",
        "117333",
        "117336",
        "117331",
        "117338",
        "117340",
        "117330",
        "117332",
        "117335",
        "117329",
        "117327",
        "117322",
        "117324",
        "4040X2-5/16",
        "117321",
        "117326",
        "117319",
        "117328",
        "4040X2-13/16",
        "117325",
        "117318",
        "117320",
        "117323",
        "4040X2-1/16",
        "117317",
        "4040X1-9/16",
        "117315",
        "117310",
        "117312",
        "117314",
        "4040X1-3/16",
        "117316",
        "4040X1-13/16",
        "117313",
        "117311",
        "117729",
        "426013",
        "393170",
        "117297",
        "117722",
        "117732",
        "117737",
        "119683",
        "119684",
        "117738",
        "119816",
        "3535X45MM",
        "3535X42MM",
        "3535X40MM",
        "3535X38MM",
        "117710",
        "117234",
        "3535X35MM",
        "117707",
        "117236",
        "117233",
        "117709",
        "117231",
        "117703",
        "117708",
        "117230",
        "117232",
        "117235",
        "117229",
        "117227",
        "117222",
        "117224",
        "3535X2-5/16",
        "117221",
        "117226",
        "117219",
        "117228",
        "3535X2-13/16",
        "117225",
        "117218",
        "117220",
        "117223",
        "3535X2-1/16",
        "117217",
        "3535X1-9/16",
        "117215",
        "117210",
        "117212",
        "3535X1-5/16",
        "117209",
        "117214",
        "117207",
        "117216",
        "3535X1-13/16",
        "117213",
        "117208",
        "117211",
        "3030X75MM",
        "3030X70MM",
        "3030X65MM",
        "119813",
        "119812",
        "3030X50MM",
        "119811",
        "3030X45MM",
        "3030X42MM",
        "3030X40MM",
        "3030X39MM",
        "119810",
        "3030X36MM",
        "3030X35MM",
        "117182",
        "119809",
        "117181",
        "117183",
        "3030X30MM",
        "117037",
        "119808",
        "117035",
        "117028",
        "3030X25MM",
        "117031",
        "117026",
        "3030X24MM",
        "117027",
        "117033",
        "117024",
        "3030X22MM",
        "117036",
        "3030X2-13/16",
        "117032",
        "117023",
        "117025",
        "117029",
        "117022",
        "117021",
        "117014",
        "117019",
        "117012",
        "117015",
        "117010",
        "117004",
        "117011",
        "117017",
        "117008",
        "117020",
        "117018",
        "117016",
        "117007",
        "117009",
        "117013",
        "3030X1-1/16",
        "117005",
        "117103",
        "119648",
        "119646",
        "117179",
        "117178",
        "117180",
        "117134",
        "117132",
        "117125",
        "117128",
        "117137",
        "117124",
        "117130",
        "117121",
        "117133",
        "117139",
        "117129",
        "117120",
        "117122",
        "117126",
        "117119",
        "117118",
        "117135",
        "117116",
        "117109",
        "117112",
        "117107",
        "117101",
        "117108",
        "117114",
        "117105",
        "117117",
        "117136",
        "117113",
        "117104",
        "117106",
        "117110",
        "3020X1-1/16",
        "117102",
        "119306",
        "2525X60MM",
        "2525X55MM",
        "2525X50MM",
        "2525X48MM",
        "2525X45MM",
        "2525X42MM",
        "2525X40MM",
        "2525X39MM",
        "2525X38MM",
        "2525X36MM",
        "2525X35MM",
        "2525X32MM",
        "2525X30MM",
        "119304",
        "2525X28MM",
        "119331",
        "2525X25MM",
        "119329",
        "2525X24MM",
        "119330",
        "119327",
        "2525X22MM",
        "119326",
        "119328",
        "119332",
        "2525X2-1/16",
        "2525X20MM",
        "119324",
        "2525X19MM",
        "2525X1-9/16",
        "119322",
        "119315",
        "119318",
        "2525X1-5/16",
        "2525X15/16",
        "119314",
        "119320",
        "119311",
        "2525X13/16",
        "119323",
        "119321",
        "119319",
        "119310",
        "119312",
        "119316",
        "2525X1-1/16",
        "119308",
        "2517X9/16",
        "119106",
        "119643",
        "119642",
        "119641",
        "119640",
        "119102",
        "119630",
        "119629",
        "119628",
        "119627",
        "2517X39MM",
        "119626",
        "2517X36MM",
        "119625",
        "119104",
        "117176",
        "117111",
        "119129",
        "117098",
        "117175",
        "117115",
        "117096",
        "117097",
        "2517X2-1/2",
        "119125",
        "117174",
        "119117",
        "119122",
        "119115",
        "119118",
        "119113",
        "119107",
        "119114",
        "119120",
        "119111",
        "119105",
        "117173",
        "119121",
        "119119",
        "119110",
        "119112",
        "119116",
        "119109",
        "119103",
        "119108",
        "119242",
        "117089",
        "2012X50MM",
        "117087",
        "119668",
        "119617",
        "119616",
        "119615",
        "119614",
        "2012X36MM",
        "119613",
        "119612",
        "119611",
        "117088",
        "119610",
        "119609",
        "119608",
        "119667",
        "117177",
        "119607",
        "117170",
        "119574",
        "119258",
        "119666",
        "117095",
        "117167",
        "119665",
        "117092",
    
      ];

      let pagePromise = (link, prodId) =>
        new Promise(async (resolve, reject) => {
          let dataObj = {};
          newPage = await browser.newPage();
          // console.log(newPage);
          await newPage.goto(link, { waitUntil: "load", timeout: 70000 });
          console.log("inside here");

          const [spec] = await newPage.$x(
            '//*[@id="catalog-detail"]/div[2]/div/div/div/nav/ul/li[1]'
          );

          const [type] = await newPage.$x(
            '//*[@id="catalog-detail"]/div[2]/div/div/div/div/div[1]/div[2]/div[2]/div[1]/span[1]'
          );

          if (typeof (await spec) !== "undefined") {
            const chkSpec = await spec.getProperty("textContent");

            if ((await chkSpec.jsonValue()) === "Specs") {
              if (typeof (await type) !== "undefined") {
                const chkType = await type.getProperty("textContent");
                console.log("check type");
                console.log(await chkType.jsonValue());
                if ((await chkType.jsonValue()) === "Bushing Length") {
                  console.log("fantasy");
                  //Product ID
                  const [pid] = await newPage.$x(
                    '//*[@id="content"]/div[3]/section[1]/div[3]/h1'
                  );
                  //Outside Diameter
                  const [od] = await newPage.$x(
                    '//*[@id="catalog-detail"]/div[2]/div/div/div/div/div[1]/div[2]/div[2]/div[1]/span[2]'
                  );
                  if (typeof (await pid) !== "undefined") {
                    const chkPid = await pid.getProperty("textContent");
                    const chkOd = await od.getProperty("textContent");
                    let res = await chkOd.jsonValue();
                    let outsideDiameter = parseFloat(res.match(/[\d\.]+/))
                      .toFixed(4)
                      .toString();
                    console.log(outsideDiameter);

                    dataObj["productID"] = await chkPid.jsonValue();
                    dataObj["OutsideDiameter"] = outsideDiameter + '"';
                    resolve(dataObj);
                    await newPage.close();
                  } else {
                    console.log("pid is undefined");
                    dataObj["product ID"] = prodId;
                    resolve(dataObj);
                    await newPage.close();
                  }
                } else {
                  dataObj["product ID"] = prodId;
                  resolve(dataObj);
                  await newPage.close();
                }
              }
            } else {
              dataObj["product ID"] = prodId;
              resolve(dataObj);
              await newPage.close();
            }
          } else {
            dataObj["product ID"] = prodId;
            resolve(dataObj);
            await newPage.close();
          }
        });

      console.log("looping");
      console.log(urls);

      for (link in urls) {
        console.log(urls[link]);
        if (urls[link] != null) {
          console.log("got in");
          console.log(`https://www.baldor.com/catalog/${urls[link]}`);
          let currentPageData = await pagePromise(
            `https://www.baldor.com/catalog/${urls[link]}`,
            link
          );

          scrapedData.push(currentPageData);
        }
      }

      await newPage.close();
      return scrapedData;
    }
    let data = await scrapeCurrentPage();
    console.log(data);
    return data;
  },
};

module.exports = baldorScraperObject;
